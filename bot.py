import logging
import re
import pathlib

from telegram import Update, MessageEntity
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

logging.basicConfig(level=logging.INFO)

TOKEN = "7676730172:AAHUtWkkpdFb9H3cDZT81utpjFMJZoinK18"
GROUP_CHAT_ID = 1001890799008

BASE_DIR = pathlib.Path(__file__).parent.resolve()
AD_IMAGE_PATH = BASE_DIR / "ad_banner.jpg"

CUSTOM_EMOJI_IDS = ["5206607081334906820", "5355012477883004708"]
PREMIUM_ADMINS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ user_id

first_law_text = (
    "üîî ’à÷Ç’∑’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ üîî  \n"
    "‚ÄºÔ∏è ‘Ω’¥’¢’´ ’Ø’°’∂’∏’∂’∂’•÷Ä’® ‚ÄºÔ∏è \n\n"
    "1Ô∏è‚É£ ‘≥÷Ä’•÷Ñ ’∞’°’µ’•÷Ä’•’∂ ’Ø’°’¥ ’¨’°’ø’´’∂’°’ø’°’º  \n"
    "2Ô∏è‚É£ ’â’ø’°÷Ä’°’Æ’•’¨ ’∏÷Ç÷Ä’´’∑ ’≠’¥’¢’•÷Ä\n"
    "3Ô∏è‚É£ ’Ä’°÷Ä’£’•’¨ ’≠’¥’¢’´ ’¢’∏’¨’∏÷Ä ’°’∂’§’°’¥’∂’•÷Ä’´’∂\n"
    "4Ô∏è‚É£ ’î’°’≤’°÷Ñ’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’π÷Ñ’∂’∂’°÷Ä’Ø’•’¨\n"
    "5Ô∏è‚É£ ‘ø÷Ä’´’¥’´’∂’°’¨ ’∫’∏’Ω’ø’•÷Ä’® ’°÷Ä’£’•’¨’æ’∏÷Ç’¥ ’ß\n"
    "6Ô∏è‚É£ ’ë’°’∂’Ø’°÷Å’°’Æ ’£’∏’Æ’∏÷Ç’∂’•’∏÷Ç’©’µ’°’∂ ’£’∏’æ’°’¶’§’®, ’∏÷Ä’´÷Å ’•’Ø’°’¥’∏÷Ç’ø ’•÷Ñ ’°’Ø’∂’Ø’°’¨’∏÷Ç’¥, ’¢’°÷Å’´ ’Å’•÷Ä ’°’∂’±’∂’°’Ø’°’∂ ’´÷Ä’•÷Ä’´ ’æ’°’≥’°’º÷Ñ’´÷Å ’Ø’°’¥ ’æ’°÷Ä’±’°’Ø’°’¨’∏÷Ç’©’µ’°’∂ ’∞’°’∂’±’∂’•’¨’∏÷Ç÷Å ’æ’≥’°÷Ä’∏’æ’´ ’ß, ’£’∏’æ’°’¶’§’´ ’∞’°’¥’°÷Ä ’Ø’°’∫’∂’æ’•÷Ñ`@losangelosadmin"
)

def build_premium_ad(is_premium=False):
    text = (
        "üì∫ First Stream TV\n"
        "‚úÖ  16,000+ ’°’¨’´÷Ñ’∂’•÷Ä\n"
        "‚úÖ  ’ñ’´’¨’¥’•÷Ä ‚Ä¢ ’ç’•÷Ä’´’°’¨’∂’•÷Ä ‚Ä¢ ’ç’∫’∏÷Ä’ø\n"
        "‚úÖ  ’Ä’°’Ω’°’∂’•’¨’´ ’ß ’¢’∏’¨’∏÷Ä ’Ω’°÷Ä÷Ñ’•÷Ä’∏÷Ç’¥\n"
        "üí∏ ’á’°’ø ’¥’°’ø’π’•’¨’´ ’£’´’∂\n\n"
        "‚úÖ Netflix\n‚úÖ Match TV\n‚úÖ Fast Sports TV\n‚úÖ Discovery\n‚úÖ National Geographic\n"
        "üì≤ ‘ø’°’∫’ù @vahekarapetyan10"
    )
    entities = []
    if is_premium:
        idx = 0
        emoji_index = 0
        while True:
            pos = text.find("‚òë", idx)
            if pos == -1:
                break
            custom_id = CUSTOM_EMOJI_IDS[emoji_index % len(CUSTOM_EMOJI_IDS)]
            entities.append(MessageEntity(type="custom_emoji", offset=pos, length=1, custom_emoji_id=custom_id))
            idx = pos + 1
            emoji_index += 1
    return text, entities


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‘≤’°÷Ä÷á! ‘µ’Ω ‘º’∏’Ω ‘±’∂’ª’•’¨’•’Ω ’Ä’°’µ’•÷Ä ’≠’¥’¢’´ ’¢’∏’ø’∂ ’•’¥ üòä")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "’Ä÷Ä’°’¥’°’∂’∂’•÷Ä:\n"
        "/premiumtest ‚Äî ’∫÷Ä’•’¥’´’∏÷Ç’¥ ’£’∏’æ’°’¶’§’´ ÷É’∏÷Ä’±\n"
        "/getemojiid ‚Äî ’Ω’ø’°’∂’°’¨ emoji ID\n"
        "/debugad ‚Äî ’Ω’ø’∏÷Ç’£’•’¨ ’£’∏’æ’°’¶’§’´ ’∂’Ø’°÷Ä’®\n"
        "/testlaw ‚Äî ÷É’∏÷Ä’±’•’¨ ’Ø’°’∂’∏’∂’∂’•÷Ä’®\n"
        "/del ‚Äî ’ª’∂’ª’•’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®, ’∏÷Ä’´ ’∫’°’ø’°’Ω’≠’°’∂’´’∂ ’£÷Ä’∏÷Ç’¥ ’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®"
    )


async def premiumtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_premium = user_id in PREMIUM_ADMINS or (getattr(update.effective_user, 'is_premium', False))
    text, entities = build_premium_ad(is_premium=is_premium)
    if AD_IMAGE_PATH.is_file():
        with open(AD_IMAGE_PATH, "rb") as f:
            await update.message.reply_photo(photo=f, caption=text)
    else:
        await update.message.reply_text(text=text)


async def getemojiid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.entities:
        ids = [e.custom_emoji_id for e in update.message.entities if e.type == "custom_emoji"]
        await update.message.reply_text("ID-’∂’•÷Ä:\n" + "\n".join(ids) if ids else "’â’£’ø’° custom emoji.")
    else:
        await update.message.reply_text("’â’£’ø’° custom emoji.")


async def debugad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if AD_IMAGE_PATH.is_file():
        with open(AD_IMAGE_PATH, "rb") as f:
            await update.message.reply_photo(photo=f, caption="’Ü’Ø’°÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥:")
    else:
        await update.message.reply_text("’Ü’Ø’°÷Ä’® ’π’Ø’°!")


async def testlaw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_first_law(context)
    await update.message.reply_text("‚úÖ ‘ø’°’∂’∏’∂’∂’•÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å’´’∂")


async def publish_first_law(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=first_law_text)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "") + " " + (update.message.caption or "")
    if re.search(r"(t\.me/[^\s]+|telegram\.me/[^\s]+)", text, re.IGNORECASE):
        try:
            await update.message.delete()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def delete_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∫’°’ø’°’Ω’≠’°’∂’•÷Ñ ’°’µ’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂’®, ’∏÷Ä’® ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’ª’∂’ª’•’¨, ÷á ’∂’∏÷Ä’´÷Å ’£÷Ä’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®÷â")
        return
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.reply_to_message.message_id)
        await update.message.delete()
    except Exception as e:
        await update.message.reply_text(f"’â’∞’°’ª’∏’≤’æ’•÷Å ’ª’∂’ª’•’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®: {e}")


async def scheduled_publish_first_law(app):
    await app.bot.send_message(chat_id=GROUP_CHAT_ID, text=first_law_text)


async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("premiumtest", premiumtest))
    app.add_handler(CommandHandler("getemojiid", getemojiid))
    app.add_handler(CommandHandler("debugad", debugad))
    app.add_handler(CommandHandler("testlaw", testlaw))
    app.add_handler(CommandHandler("del", delete_message_handler))

    app.add_handler(MessageHandler(filters.TEXT | filters.Caption, handle_message))

    scheduler = AsyncIOScheduler(timezone=timezone("Asia/Yerevan"))
    scheduler.add_job(lambda: scheduled_publish_first_law(app), "cron", hour=9, minute=0)
    scheduler.start()

    await app.run_polling()


if __name__ == "__main__":
    import asyncio
    import nest_asyncio

    nest_asyncio.apply()

    asyncio.run(main())
