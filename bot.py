import nest_asyncio
import asyncio
import logging
import re
import pathlib
from telegram import Update, MessageEntity
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "7676730172:AAHUtWkkpdFb9H3cDZT81utpjFMJZoinK18"  # ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
GROUP_CHAT_ID = -1001890799008

BASE_DIR = pathlib.Path(__file__).parent.resolve()
AD_IMAGE_PATH = BASE_DIR / "ad_banner.jpg"
SECOND_AD_IMAGE_PATH = BASE_DIR / "second_ad_banner.jpg"
THIRD_AD_IMAGE_PATH = BASE_DIR / "third_ad_banner.jpg"
FOURTH_AD_IMAGE_PATH = BASE_DIR / "fourth_ad_banner.jpg"

CUSTOM_EMOJI_IDS = ["5206607081334906820", "5355012477883004708"]
PREMIUM_ADMINS = [123456789]  # —Ç–≤–æ–π user_id

# === ’è’•÷Ñ’Ω’ø’•÷Ä ===
first_law_text = (
    "üîî ’à÷Ç’∑’°’§÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ üîî  \n"
    "‚ÄºÔ∏è ‘Ω’¥’¢’´ ’Ø’°’∂’∏’∂’∂’•÷Ä’® ‚ÄºÔ∏è \n\n"
    "1Ô∏è‚É£ ‘≥÷Ä’•÷Ñ ’∞’°’µ’•÷Ä’•’∂ ’Ø’°’¥ ’¨’°’ø’´’∂’°’ø’°’º  \n"
    "2Ô∏è‚É£ ’â’ø’°÷Ä’°’Æ’•’¨ ’∏÷Ç÷Ä’´’∑ ’≠’¥’¢’•÷Ä\n"
    "3Ô∏è‚É£ ’Ä’°÷Ä’£’•’¨ ’≠’¥’¢’´ ’¢’∏’¨’∏÷Ä ’°’∂’§’°’¥’∂’•÷Ä’´’∂\n"
    "4Ô∏è‚É£ ’î’°’≤’°÷Ñ’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’π÷Ñ’∂’∂’°÷Ä’Ø’•’¨\n"
    "5Ô∏è‚É£ ‘ø÷Ä’´’¥’´’∂’°’¨ ’∫’∏’Ω’ø’•÷Ä’® ’°÷Ä’£’•’¨’æ’∏÷Ç’¥ ’ß\n"
    "6Ô∏è‚É£ ’ë’°’∂’Ø’°÷Å’°’Æ ’£’∏’Æ’∏÷Ç’∂’•’∏÷Ç’©’µ’°’∂ ’£’∏’æ’°’¶’§’®, ’∏÷Ä’´÷Å ’•’Ø’°’¥’∏÷Ç’ø ’•÷Ñ ’°’Ø’∂’Ø’°’¨’∏÷Ç’¥, ’¢’°÷Å’´ ’Å’•÷Ä ’°’∂’±’∂’°’Ø’°’∂ ’´÷Ä’•÷Ä’´ ’æ’°’≥’°’º÷Ñ’´÷Å ’Ø’°’¥ ’æ’°÷Ä’±’°’Ø’°’¨’∏÷Ç’©’µ’°’∂ ’∞’°’∂’±’∂’•’¨’∏÷Ç÷Å ’æ’≥’°÷Ä’∏’æ’´ ’ß, ’£’∏’æ’°’¶’§’´ ’∞’°’¥’°÷Ä ’Ø’°’∫’∂’æ’•÷Ñ`@losangelosadmin"
)

SECOND_AD_TEXT = """‘≤’°÷Ä÷á ’Å’•’¶   
üöò ‘µ’©’• ’∏÷Ç’∂’•÷Å’•’¨ ’•÷Ñ ’°’æ’ø’∏’æ’©’°÷Ä ’∞’°’¥’•÷Å’•÷Ñ ’´’¥ Body Shop :
‚úÖ  ‘±÷Ä’ø’°÷Ñ’´’∂ ’§’•÷Ü’∏÷Ä’¥’°÷Å’´’° (Body Work)
‚úÖ  ’Ü’•÷Ä’Ø’∏÷Ç’¥ (Paint)
‚úÖ ’ì’∏’¨’´’∑ (Polish)
‚úÖ  ‘∏’∂’©’°÷Å÷Ñ’°’µ’´’∂ ’¥’°’Ω’•÷Ä’´ ’æ’•÷Ä’°’∂’∏÷Ä’∏’£’∏÷Ç’¥ (Suspension)
‚úÖ  ‘ª÷Ä’°’æ’°’¢’°’∂’°’Ø’°’∂ ÷Ö’£’∂’∏÷Ç’©’µ’∏÷Ç’∂
üìû 7475995550, 7473085876
üì± https://www.instagram.com/_carprof_
"""

THIRD_AD_TEXT = """‘≤’°÷Ä÷á ’Å’•’¶üëã
‚ÄºÔ∏è‘±’Ñ’Ü ’∏÷Ç’¥ ’¢’∂’°’Ø’æ’∏’≤  ’¢’∏’¨’∏÷Ä ’¥’°÷Ä’§’Ø’°’∂÷Å ’ø÷Ä’°’¥’°’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’á’•’∂’£’•’∂’µ’°’∂ ’æ’´’¶’°’∂’•÷Ä 10 ÷Ö÷Ä’æ’° ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥‚ÄºÔ∏è
’Ä’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’£÷Ä’•’¨` @VISA_SCHENGE
’Ä’°’Ω÷Å’•` 500 N Brand Blvd, 20 floor
"""

FOURTH_AD_TEXT = (
    "‚ùáÔ∏è’Ñ’•÷Ä  ’°’Ø’°’§’•’¥’´’°’∂ ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’¥ ’ß ’ï’∂’¨’°’µ’∂  ‘±’¥’•÷Ä’´’Ø’µ’°’∂ ‘±’∂’£’¨’•÷Ä’•’∂’´ ’§’°’Ω’•÷Ä ’±’•÷Ä ÷Å’°’∂’Ø’°÷Å’°’Æ ’æ’°’µ÷Ä’´÷Å ÷á ÷Å’°’∂’Ø’°÷Å’°’Æ ’™’°’¥’´‚ùáÔ∏è\n"
    "‚úîÔ∏è’ç’∏’æ’∏÷Ä’•÷Ñ ’∂’∏÷Ä’°’£’∏÷Ç’µ’∂ ’¥’•’©’∏’§’∂’•÷Ä’∏’æ ÷á ’°÷Ä’°’£ \n"
    "‚úîÔ∏è‘Ω’∏’Ω’°’Ø÷Å’°’Ø’°’∂ ‘±’¥’•÷Ä’´’Ø’µ’°’∂ ‘±’∂’£’¨’•÷Ä’•’∂\n"
    "‚úîÔ∏è’Ä’∂’°÷Ä’°’æ’∏÷Ä ÷á ’°’∂’∞’∂’°÷Ä ’¥’•’©’∏’§’∂’•÷Ä ’°÷Ä’°’£ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ ’∏÷Ç’∂’•’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä\n"
    "’Ä’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’Ø’°’∫’∂’æ’•÷Ñ` @elevate_academy1"
)


def build_premium_ad(is_premium=False):
    text = (
        "üì∫ First Stream TV\n"
        "‚úÖ  16,000+ ’°’¨’´÷Ñ’∂’•÷Ä\n"
        "‚úÖ  ’ñ’´’¨’¥’•÷Ä ‚Ä¢ ’ç’•÷Ä’´’°’¨’∂’•÷Ä ‚Ä¢ ’ç’∫’∏÷Ä’ø\n"
        "‚úÖ  ’Ä’°’Ω’°’∂’•’¨’´ ’ß ’¢’∏’¨’∏÷Ä ’Ω’°÷Ä÷Ñ’•÷Ä’∏÷Ç’¥\n"
        "üí∏ ’á’°’ø ’¥’°’ø’π’•’¨’´ ’£’´’∂\n\n"
        "‚úÖ Netflix\n‚úÖ Match TV\n‚úÖ Fast Sports TV\n‚úÖ Discovery\n‚úÖ National Geographic\n"
        "üì≤ ‘ø’°’∫’ù @vahekarapetyan10"
    )
    entities = []
    if is_premium:
        idx = 0
        emoji_index = 0
        while True:
            pos = text.find("‚òë", idx)
            if pos == -1:
                break
            custom_id = CUSTOM_EMOJI_IDS[emoji_index % len(CUSTOM_EMOJI_IDS)]
            entities.append(MessageEntity(type="custom_emoji", offset=pos, length=1, custom_emoji_id=custom_id))
            idx = pos + 1
            emoji_index += 1
    return text, entities

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‘≤’°÷Ä÷á! ‘µ’Ω ‘º’∏’Ω ‘±’∂’ª’•’¨’•’Ω ’Ä’°’µ’•÷Ä ’≠’¥’¢’´ ’¢’∏’ø’∂ ’•’¥ üòä")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "’Ä÷Ä’°’¥’°’∂’∂’•÷Ä:\n"
        "/premiumtest ‚Äî ’∫÷Ä’•’¥’´’∏÷Ç’¥ ’£’∏’æ’°’¶’§’´ ÷É’∏÷Ä’±\n"
        "/getemojiid ‚Äî ’Ω’ø’°’∂’°’¨ emoji ID\n"
        "/debugad ‚Äî ’Ω’ø’∏÷Ç’£’•’¨ ’£’∏’æ’°’¶’§’´ ’∂’Ø’°÷Ä’®\n"
        "/testlaw ‚Äî ÷É’∏÷Ä’±’•’¨ ’Ø’°’∂’∏’∂’∂’•÷Ä’®\n"
        "/sendfirstad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 1-’´’∂ ’£’∏’æ’°’¶’§\n"
        "/sendsecondad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 2-÷Ä’§ ’£’∏’æ’°’¶’§\n"
        "/sendthirdad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 3-÷Ä’§ ’£’∏’æ’°’¶’§ (’á’•’∂’£’•’∂)\n"
        "/sendfourthad ‚Äî ’∏÷Ç’≤’°÷Ä’Ø’•’¨ 4-÷Ä’§ ’£’∏’æ’°’¶’§ (‘±’∂’£’¨’•÷Ä’•’∂ ’§’°’Ω’•÷Ä)\n"
        "/del ‚Äî ’ª’∂’ª’•’¨ ’°’µ’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®, ’∏÷Ä’´ ’∫’°’ø’°’Ω’≠’°’∂’´’∂ ’§’∏÷Ç÷Ñ ’£÷Ä’∏÷Ç’¥ ’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®"
    )

async def premiumtest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_premium = user_id in PREMIUM_ADMINS or (update.effective_user.is_premium or False)
    text, entities = build_premium_ad(is_premium=is_premium)
    if AD_IMAGE_PATH.is_file():
        with AD_IMAGE_PATH.open("rb") as f:
            await update.message.reply_photo(photo=f, caption=text, caption_entities=entities if is_premium else None)
    else:
        await update.message.reply_text(text=text)

async def getemojiid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ids = [e.custom_emoji_id for e in update.message.entities if e.type == "custom_emoji"] if update.message.entities else []
    await update.message.reply_text("ID-’∂’•÷Ä:\n" + "\n".join(ids) if ids else "’â’£’ø’° custom emoji.")

async def debugad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if AD_IMAGE_PATH.is_file():
        with AD_IMAGE_PATH.open("rb") as f:
            await update.message.reply_photo(photo=f, caption="’Ü’Ø’°÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥:")
    else:
        await update.message.reply_text("’Ü’Ø’°÷Ä’® ’π’Ø’°!") 

async def testlaw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_first_law(context.application)
    await update.message.reply_text("‚úÖ ‘ø’°’∂’∏’∂’∂’•÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å’´’∂")

async def publish_first_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_ad(context.application)
    await update.message.reply_text("‚úÖ ‘±’º’°’ª’´’∂ ’£’∏’æ’°’¶’§’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")

async def publish_second_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_second_ad(context.application)
    await update.message.reply_text("‚úÖ ‘µ÷Ä’Ø÷Ä’∏÷Ä’§ ’£’∏’æ’°’¶’§’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")

async def publish_third_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_third_ad(context.application)
    await update.message.reply_text("‚úÖ ‘µ÷Ä÷Ä’∏÷Ä’§ ’£’∏’æ’°’¶’§’® (’á’•’∂’£’•’∂) ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")

async def publish_fourth_ad_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish_fourth_ad(context.application)
    await update.message.reply_text("‚úÖ ’â’∏÷Ä÷Ä’∏÷Ä’§ ’£’∏’æ’°’¶’§’® (‘±’∂’£’¨’•÷Ä’•’∂ ’§’°’Ω’•÷Ä) ’∏÷Ç’≤’°÷Ä’Ø’æ’•÷Å")

# === –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ—Ç–≤–µ—Ç—É ===
async def delete_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        await update.message.reply_text("‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∫’°’ø’°’Ω’≠’°’∂’•÷Ñ ’°’µ’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’∂’®, ’∏÷Ä’® ÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•÷Ñ ’ª’∂’ª’•’¨, ÷á ’∂’∏÷Ä’´÷Å ’£÷Ä’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’®÷â")
        return

    msg_to_delete = update.message.reply_to_message
    chat_id = update.effective_chat.id

    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=msg_to_delete.message_id)
        await update.message.delete()
    except Exception as e:
        await update.message.reply_text(f"’â’∞’°’ª’∏’≤’æ’•÷Å ’ª’∂’ª’•’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®: {e}")

# === –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è ===
async def publish_first_law(application):
    await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=first_law_text)

async def publish_ad(application):
    text, entities = build_premium_ad(is_premium=True)
    if AD_IMAGE_PATH.is_file():
        with AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=text, caption_entities=entities)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=text)

async def publish_second_ad(application):
    if SECOND_AD_IMAGE_PATH.is_file():
        with SECOND_AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=SECOND_AD_TEXT)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=SECOND_AD_TEXT)

async def publish_third_ad(application):
    if THIRD_AD_IMAGE_PATH.is_file():
        with THIRD_AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=THIRD_AD_TEXT)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=THIRD_AD_TEXT)

async def publish_fourth_ad(application):
    if FOURTH_AD_IMAGE_PATH.is_file():
        with FOURTH_AD_IMAGE_PATH.open("rb") as f:
            await application.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=f, caption=FOURTH_AD_TEXT)
    else:
        await application.bot.send_message(chat_id=GROUP_CHAT_ID, text=FOURTH_AD_TEXT)

async def publish_both_ads(application):
    await publish_ad(application)
    await publish_second_ad(application)

# === –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = (update.message.text or "") + " " + (update.message.caption or "")
    if re.search(r"(t\.me/[^\s]+|telegram\.me/[^\s]+)", text, re.IGNORECASE):
        await update.message.delete()

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("premiumtest", premiumtest))
    application.add_handler(CommandHandler("getemojiid", getemojiid))
    application.add_handler(CommandHandler("debugad", debugad))
    application.add_handler(CommandHandler("testlaw", testlaw))
    application.add_handler(CommandHandler("sendfirstad", publish_first_ad_cmd))
    application.add_handler(CommandHandler("sendsecondad", publish_second_ad_cmd))
    application.add_handler(CommandHandler("sendthirdad", publish_third_ad_cmd))
    application.add_handler(CommandHandler("sendfourthad", publish_fourth_ad_cmd))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /del
    application.add_handler(CommandHandler("del", delete_message_handler))

    application.add_handler(MessageHandler(filters.TEXT | filters.CAPTION, handle_message))

    # ‚úÖ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è
    arm_timezone = timezone("Asia/Yerevan")
    scheduler = AsyncIOScheduler(timezone=arm_timezone)
    scheduler.add_job(publish_first_law, "cron", hour=9, minute=0, args=[application])
    scheduler.add_job(publish_third_ad, "cron", hour=10, minute=0, args=[application])
    scheduler.add_job(publish_both_ads, "cron", hour=11, minute=0, args=[application])
    scheduler.add_job(publish_fourth_ad, "cron", hour=12, minute=0, args=[application])
    scheduler.add_job(publish_third_ad, "cron", hour=16, minute=0, args=[application])  # 6 ’™’°’¥ ’ø’°÷Ä’¢’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’ù 10:00 ÷á 16:00
    scheduler.start()

    await application.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())

